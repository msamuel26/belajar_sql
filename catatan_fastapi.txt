Uvicorn yang dieksekusi di Anaconda Powershell Prompt, 
Contoh: uvicorn api3:aplikasi --host 0.0.0.0 --port 80 --reload

"api3" merupakan nama file, dan "aplikasi" merupakan nama variabel dari FastAPI() yang berada di file api3 (aplikasi = FastAPI())

Untuk meng-akses web API: http://localhost/docs#/

select c.first_name,
	   c.last_name,
	   o.item,
	   o.amount,
	   s.status
  from shippings s
  join orders o on (o.customer_id = c.id)
  join customers c on (c.id = s.customer_id)
 where o.id = 3

Pada kode tersebut, akan menghasilkan error dibawah ini:

SQL Error [42P01]: ERROR: missing FROM-clause entry for table "c"

Hal tersebut terjadi karena "c.id" yang berada di "join orders" diketik sebelum definisi aliasing
"customers c" terbentuk/dibuat 


Untuk membuat sistem menjadi lebih baik/cepat, maka penggunaan index yang benar diperlukan.
Index adalah sebuah objek dalam sistem database yang dapat mempercepat proses pencarian (query) data

Contoh pembuatan index di kolom "id" di tabel "orders":

CREATE TABLE public.orders (
	id serial4 NOT NULL,
	item varchar NULL,
	amount int4 NULL,
	customer_id int4 NULL,
	CONSTRAINT orders_pkey PRIMARY KEY (id)
);
CREATE INDEX ix_orders_id ON public.orders USING btree (id);


Untuk mengetahui contoh-contoh projek suatu topik, bisa menggunakan query Google: Github Awesome FastAPI Project


Hari ini belajar:
1. Git clone project dari github (mengambil source code dari github punya orang lain)
2. Memisahkan isi kode menjadi beberapa file: database.py, models.py, main.py
3. Menampilkan data menggunakan Jinja template agar bisa diakses di web browser
4. Akses ke web sudah bisa dilakukan, begitu juga docs-nya 


Hari ini memahami tentang offset dan limit 

Contoh: select * from customers c 
			offset 4
			limit 2

Berikut ini adalah hasil dari "select * from customers c":

1	John	Doe		23	USA
2	Mc		Pout	45	IDN
3	Nyir	Cengir	 7	IDN
4	Mami	Setip	37	IDN
5	Boboy	Bagunge	21	IDN
6	John	Prut	23	USA
7	Mak e	Ngomel	45	IDN
10	Mixue	Doe		23	CHN


Kemudian hasil dari "select * from customers c limit 3":
1	John	Doe		23	USA
2	Mc		Pout	45	IDN
3	Nyir	Cengir	 7	IDN


Kemudian hasil dari "select * from customers c offset 2":
3	Nyir	Cengir	 7	IDN
4	Mami	Setip	37	IDN
5	Boboy	Bagunge	21	IDN
6	John	Prut	23	USA
7	Mak e	Ngomel	45	IDN
10	Mixue	Doe		23	CHN

Berikut ini adalah hasil query (offset 4 limit 2):

select * from customers c 
			offset 4
			limit 2

Hasil:
5	Boboy	Bagunge	21	IDN
6	John	Prut	23	USA

Kode tersebut berarti: mengabaikan 4 data awal, setelah itu menampilkan 2 data selanjutnya
						(yaitu data ke-5 dan ke-6)


Hari ini mempelajari async (asynchronous) dan sync (synchronous)

Tujuan dari fungsi async adalah untuk memungkinkan server untuk menangani banyak permintaan secara 
bersamaan tanpa menunggu satu permintaan selesai sebelum memulai yang berikutnya.

Sync berjalan dalam urutan yang dipanggil dan memblokir sampai mereka mengembalikan hasil

Untuk performa yang lebih baik, disarankan menggunakan fungsi async untuk operasi I/O-bound, seperti mengambil data dari API eksternal, 
dan menggunakan fungsi synchronous untuk operasi CPU-bound, seperti pemrosesan data.

Contoh I/O-bound dalam dunia nyata (analogi):

Menerima perintah dari orang tua untuk melakukan aktivitas menyapu rumah, hal tersebut merupakan I/O bound
karena menerima perintah dan melakukan aktivitas yang memakan waktu


Contoh CPU-bound dalam dunia nyata (analogi):

Menjawab pertanyaan "5 x 5"


Hari ini mempelajari tentang konsep database transaction. 

Atomicity: sifat ini menjamin bahwa transaksi database akan dilakukan secara keseluruhan atau tidak sama sekali.
Dengan kata lain, jika salah satu perintah dalam transaksi mengalami kegagalan, maka seluruh transaksi akan dibatalkan
dan database akan dikembalikan ke kondisi sebelumnya.

Contoh implementasi database transaction dalam hal sederhana, yaitu kesepakatan mencari tempat untuk makan.
1. Bapak dan Adek ingin makan di Lek Owi, sedangkan Ibu tidak mau. Sehingga status gagal dan tidak jadi 
	makan di Lek Owi
2. Ibu ingin makan di Pak Surip, Bapak dan Adek oke. Maka, status berhasil dan jadi makan di Pak Surip



Hari ini mempelajari pydantic yang digunakan sebagai cara untuk 2 validasi

1. Validasi yang memastikan bahwa amount yang akan dikirim dari rekening satu ke rekening lain harus lebih dari 0 atau tidak boleh negatif
	(yang berada di "schemas.transfer")

	from pydantic import BaseModel, validator
	
	# Create a Pydantic model for the Order
	class TransferInfo(BaseModel):
		from_account_id: int
		to_account_id: int
		amount: int
		
		@validator('amount')
		def amount_must_be_positive(cls, value):
			if value < 0:
				raise ValueError('Nilai harus positif')
			return value

2. Validasi yang memastikan bahwa saldo (balance) suatu rekening tidak boleh lebih kecil dari 0 atau tidak boleh negatif
	(yang berada di "schemas.account")
	
	from pydantic import BaseModel, Field, validator
	
	# Create a Pydantic model for the Order
	class AccountInfo(BaseModel):
		account_number: str = Field(..., example="1039009900")
		balance: int = Field(..., example=2500)
		customer_id: int = Field(..., example=1)
		
		@validator('balance')
		def balance_must_be_positive(cls, value):
			if value < 0:
				raise ValueError('Balance harus positif')
			return value
			
		class Config:
			orm_mode = True
			
	class AccountInfoID(AccountInfo):
		id: int


Pada folder "fastapi-trans" yang berada di "msamuel26/programming" terdapat beberapa subfolder dan masing-masing memiliki tujuan yaitu:
1. "extensions" digunakan untuk koneksi ke database
2. "models" digunakan untuk definisi tabel
3. "schemas" berisi kode-kode pydantic yang melakukan validasi tipe data setiap Field dan bisa melakukan validasi isi di Field tersebut (batasan nilai)
	Contoh: untuk batasan nilai di Field Balance tidak boleh lebih kecil dari 0
4. "services" untuk menaruh kode-kode yang berkaitan dengan business process
5. "repositories" berisi standard CRUD
6. "decorators" digunakan untuk mem-bundling proses database transactionalnya
7. "api" berisi kode yang digunakan untuk berkomunikasi dengan sistem lain (dalam format JSON)


Untuk melihat dokumentasi resmi tentang Pydantic, 
	kunjungi: https://pydantic-docs.helpmanual.io/
